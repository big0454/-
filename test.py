import re
import requests
import asyncio
from telethon import TelegramClient, events

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Telegram
api_id = 29316101
api_hash = "81d03af65c3d3a442f38559d3967e28c"
owner_id = 7094215368  # üî• ‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ
notify_group_id = -1002405260670  # üî• ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
phone_file = "phone_numbers.txt"  # üìÑ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_phone_numbers():
    try:
        with open(phone_file, "r") as f:
            return [line.strip() for line in f if line.strip().isdigit()]
    except FileNotFoundError:
        return []

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_phone_numbers(numbers):
    with open(phone_file, "w") as f:
        f.write("\n".join(numbers) + "\n")

# ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
phone_numbers = load_phone_numbers()

# üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á client
client = TelegramClient("truemoney_bot", api_id, api_hash)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ)
def extract_angpao_codes(text):
    return re.findall(r"https?://gift\.truemoney\.com/campaign/\?v=([a-zA-Z0-9]+)", text)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á API ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
def claim_angpao(code, phone):
    url = f"https://store.cyber-safe.pro/api/topup/truemoney/angpaofree/{code}/{phone}"
    try:
        response = requests.get(url, timeout=3)  # ‚è≥ ‡∏•‡∏î timeout ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏î
        return response.json() if response.status_code == 200 else None
    except Exception:
        return None

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤
async def process_angpao(angpao_codes, original_text):
    for angpao_code in angpao_codes:
        print(f"üéÅ ‡∏û‡∏ö‡∏ã‡∏≠‡∏á: {angpao_code}")

        results = []
        for phone in phone_numbers:
            response = claim_angpao(angpao_code, phone)

            if response and "data" in response and "voucher" in response["data"]:
                amount = response["data"]["voucher"].get("amount_baht", "0.00")
                status_msg = response["status"].get("message", "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                amount = "0.00"
                status_msg = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"

            result_text = f"üì≤ ‡πÄ‡∏ö‡∏≠‡∏£‡πå: {phone}\nüí∞ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {amount} ‡∏ö‡∏≤‡∏ó\nüìú ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_msg}"
            results.append(result_text)

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° Telegram
        final_msg = f"üéâ ‡∏ã‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà! üéÅ\nüîó {original_text}\n\n" + "\n\n".join(results)
        await client.send_message(notify_group_id, final_msg)

# ‚úÖ ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
@client.on(events.NewMessage)
async def message_handler(event):
    if event.photo:  # ‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        return

    text = event.raw_text  # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    angpao_codes = extract_angpao_codes(text)

    if angpao_codes:
        await process_angpao(angpao_codes, text)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á)
@client.on(events.NewMessage(pattern=r"^/add (\d{10})$"))
async def add_phone(event):
    if event.sender_id != owner_id:
        return await event.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå")

    new_phone = event.pattern_match.group(1)
    if new_phone in phone_numbers:
        return await event.reply(f"‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå {new_phone} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")

    phone_numbers.append(new_phone)
    save_phone_numbers(phone_numbers)
    await event.reply(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå {new_phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á)
@client.on(events.NewMessage(pattern=r"^/del (\d{10})$"))
async def del_phone(event):
    if event.sender_id != owner_id:
        return await event.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå")

    del_phone = event.pattern_match.group(1)
    if del_phone not in phone_numbers:
        return await event.reply(f"‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå {del_phone} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

    phone_numbers.remove(del_phone)
    save_phone_numbers(phone_numbers)
    await event.reply(f"‚úÖ ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå {del_phone} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á)
@client.on(events.NewMessage(pattern=r"^/list$"))
async def list_phones(event):
    if event.sender_id != owner_id:
        return await event.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡πÄ‡∏ö‡∏≠‡∏£‡πå")

    phone_list = "\n".join(phone_numbers) if phone_numbers else "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
    await event.reply(f"üìã ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n\n{phone_list}")

# ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
with client:
    client.run_until_disconnected()
