import re
import asyncio
import aiohttp
import os
import json
import cv2
import numpy as np
from datetime import datetime
from pyzbar.pyzbar import decode
from telethon import TelegramClient, events
from telethon.tl.types import MessageEntityTextUrl

# üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Telegram
api_id = 29316101
api_hash = "81d03af65c3d3a442f38559d3967e28c"
notify_group_id = -1002405260670  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
admin_id = 7094215368  # ‡πÑ‡∏≠‡∏î‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ
phone_file = "phone_numbers.json"

# üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á client
client = TelegramClient("truemoney_bot", api_id, api_hash)

# üìå ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
def load_phone_numbers():
    if os.path.exists(phone_file):
        with open(phone_file, "r") as f:
            phone_data = json.load(f)
        # ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        today = datetime.today().strftime("%Y-%m-%d")
        return {p: d for p, d in phone_data.items() if d == "0" or d >= today}
    return {}

phone_numbers = load_phone_numbers()

# üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_phone_numbers(phone_numbers):
    with open(phone_file, "w") as f:
        json.dump(phone_numbers, f, indent=4)

# üìå ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏£‡∏Å‡∏≠‡∏¢‡∏π‡πà
def extract_angpao_codes(text):
    pattern = r"https?://\s*gift\.\s*truemoney\.\s*com/\s*campaign/\s*\?\s*v=\s*([a-zA-Z0-9]+)"
    matches = re.findall(pattern, text.replace(" ", ""))
    return list(set(matches))

# üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°
async def notify_group(angpao_code, results):
    message = f"‡∏û‡∏ö‡∏ã‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πàüí•\n‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ã‡∏≠‡∏á: https://gift.truemoney.com/campaign/?v={angpao_code}\n\n"
    for phone, status in results:
        message += f"{phone} {'‚úÖ ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if status else '‚ùå ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}\n"
    await client.send_message(notify_group_id, message)

# üìå ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
async def claim_angpao(code, phone):
    url = f"https://store.cyber-safe.pro/api/topup/truemoney/angpaofree/{code}/{phone}"
    headers = {"User-Agent": "Mozilla/5.0"}
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, timeout=0.6) as response:
                return phone, response.status == 200
        except Exception:
            return phone, False

# üìå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ã‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô
async def process_angpao(angpao_code):
    print(f"üéÅ ‡∏û‡∏ö‡∏ã‡∏≠‡∏á: {angpao_code}")

    priority_numbers = ["0951417365", "0659599070"]
    other_numbers = [p for p in phone_numbers.keys() if p not in priority_numbers]

    # ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    tasks = [claim_angpao(angpao_code, phone) for phone in priority_numbers if phone in phone_numbers]
    priority_results = await asyncio.gather(*tasks)

    # ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    tasks = [claim_angpao(angpao_code, phone) for phone in other_numbers]
    other_results = await asyncio.gather(*tasks)

    results = priority_results + other_results
    await notify_group(angpao_code, results)

# üìå ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
@client.on(events.NewMessage)
async def message_handler(event):
    text = event.raw_text
    angpao_codes = extract_angpao_codes(text)

    # ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
    if event.message.entities:
        for entity in event.message.entities:
            if isinstance(entity, MessageEntityTextUrl):
                angpao_codes += extract_angpao_codes(entity.url)

    angpao_codes = list(set(angpao_codes))

    # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ã‡∏≠‡∏á ‡∏£‡∏µ‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    for code in angpao_codes:
        asyncio.create_task(process_angpao(code))

# üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
@client.on(events.NewMessage(pattern=r"/(add|remove|list)"))
async def manage_phone(event):
    global phone_numbers
    if event.sender_id != admin_id:
        return await event.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")

    command, *args = event.text.split()
    if command == "/add" and args:
        new_number = args[0]
        expiry_date = args[1] if len(args) > 1 else "0"  # 0 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        if new_number not in phone_numbers:
            phone_numbers[new_number] = expiry_date
            save_phone_numbers(phone_numbers)
            await event.reply(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå {new_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: {'‡πÑ‡∏°‡πà‡∏°‡∏µ' if expiry_date == '0' else expiry_date}")
    elif command == "/remove" and args:
        del_number = args[0]
        if del_number in phone_numbers:
            del phone_numbers[del_number]
            save_phone_numbers(phone_numbers)
            await event.reply(f"‚úÖ ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå {del_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    elif command == "/list":
        if phone_numbers:
            phone_list = "\n".join([f"{p} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: {'‡πÑ‡∏°‡πà‡∏°‡∏µ' if d == '0' else d}" for p, d in phone_numbers.items()])
        else:
            phone_list = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        await event.reply(f"üìú ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà:\n{phone_list}")

# üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
with client:
    client.run_until_disconnected()
