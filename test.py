import re
import requests
import os
import cv2
import numpy as np
from pyzbar.pyzbar import decode
from telethon import TelegramClient, events
from telethon.tl.types import MessageEntityTextUrl
from io import BytesIO

# üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Telegram
api_id = 29316101
api_hash = "81d03af65c3d3a442f38559d3967e28c"
notify_group_id = -1002405260670  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
admin_id = 7094215368  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ
phone_file = "phone_numbers.txt"

# üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á client
client = TelegramClient("truemoney_bot", api_id, api_hash)

# üìå ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_phone_numbers():
    if os.path.exists(phone_file):
        with open(phone_file, "r") as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    return []

# üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_phone_numbers(phone_numbers):
    with open(phone_file, "w") as f:
        f.write("\n".join(phone_numbers) + "\n")

# üìå ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå
phone_numbers = load_phone_numbers()

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def extract_angpao_codes(text):
    return re.findall(r"https?://gift\.truemoney\.com/campaign\?v=([\w\d]+)", text)

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á API ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
def claim_angpao(code, phone):
    url = f"https://store.cyber-safe.pro/api/topup/truemoney/angpaofree/{code}/{phone}"
    try:
        response = requests.get(url, timeout=2)  # ‡∏•‡∏î timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        return response.json() if response.status_code == 200 else None
    except Exception:
        return None

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤
async def process_angpao(angpao_codes, original_text):
    for angpao_code in angpao_codes:
        print(f"üéÅ ‡∏û‡∏ö‡∏ã‡∏≠‡∏á: {angpao_code}")

        results = []
        for phone in phone_numbers:
            response = claim_angpao(angpao_code, phone)

            if response and "data" in response and "voucher" in response["data"]:
                amount = response["data"]["voucher"].get("amount_baht", "0.00")
                status_msg = response["status"].get("message", "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                amount = "0.00"
                status_msg = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"

            result_text = f"üì≤ ‡πÄ‡∏ö‡∏≠‡∏£‡πå: {phone}\nüí∞ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {amount} ‡∏ö‡∏≤‡∏ó\nüìú ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status_msg}"
            results.append(result_text)

        # üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° Telegram
        final_msg = f"üéâ ‡∏ã‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà! üéÅ\nüîó {original_text}\n\n" + "\n\n".join(results)
        await client.send_message(notify_group_id, final_msg)

# üìå ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏ü‡πâ‡∏≤, ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡πà‡∏≠‡∏ô)
@client.on(events.NewMessage)
async def message_handler(event):
    text = event.raw_text  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    angpao_codes = extract_angpao_codes(text)

    # üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏ü‡πâ‡∏≤)
    if event.message.entities:
        for entity in event.message.entities:
            if isinstance(entity, MessageEntityTextUrl):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡πà‡∏≠‡∏ô
                angpao_codes += extract_angpao_codes(entity.url)

    if angpao_codes:
        await process_angpao(angpao_codes, text)

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á
def extract_qr_code(image):
    try:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        barcodes = decode(gray)
        for barcode in barcodes:
            url = barcode.data.decode("utf-8")
            if "gift.truemoney.com/campaign/?v=" in url:
                return extract_angpao_codes(url)
    except Exception:
        return []
    return []

# üìå ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö QR Code ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
@client.on(events.NewMessage)
async def qr_code_handler(event):
    if event.photo:
        img = await event.download_media(BytesIO())
        img = cv2.imdecode(np.frombuffer(img.getvalue(), np.uint8), cv2.IMREAD_COLOR)

        angpao_codes = extract_qr_code(img)
        if angpao_codes:
            await process_angpao(angpao_codes, "üì∏ ‡∏ã‡∏≠‡∏á‡∏à‡∏≤‡∏Å QR Code!")

# üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå
@client.on(events.NewMessage(pattern=r"/(add|remove|list)"))
async def manage_phone(event):
    global phone_numbers
    if event.sender_id != admin_id:
        return await event.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")

    command, *args = event.text.split()
    if command == "/add" and args:
        new_number = args[0]
        if new_number not in phone_numbers:
            phone_numbers.append(new_number)
            save_phone_numbers(phone_numbers)
            await event.reply(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå {new_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            await event.reply(f"‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå {new_number} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")

    elif command == "/remove" and args:
        del_number = args[0]
        if del_number in phone_numbers:
            phone_numbers.remove(del_number)
            save_phone_numbers(phone_numbers)
            await event.reply(f"‚úÖ ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå {del_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            await event.reply(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå {del_number} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!")

    elif command == "/list":
        phone_list = "\n".join(phone_numbers) if phone_numbers else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        await event.reply(f"üìú ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà:\n{phone_list}")

# üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
with client:
    client.run_until_disconnected()
