import re
import asyncio
import aiohttp
import os
import cv2
import numpy as np
from pyzbar.pyzbar import decode
from telethon import TelegramClient, events
from telethon.tl.types import MessageEntityTextUrl
import urllib.parse

# üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Telegram
api_id = 29316101
api_hash = "81d03af65c3d3a442f38559d3967e28c"
notify_group_id = -1002405260670  # ‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
admin_id = 7094215368  # ‡πÑ‡∏≠‡∏î‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ
phone_file = "phone_numbers.txt"

# üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á client
client = TelegramClient("truemoney_bot", api_id, api_hash)

# üìå ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_phone_numbers():
    if os.path.exists(phone_file):
        with open(phone_file, "r", encoding="utf-8") as f:
            return [line.strip() for line in f.readlines() if line.strip()]
    return []

phone_numbers = load_phone_numbers()

# üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_phone_numbers(phone_numbers):
    with open(phone_file, "w", encoding="utf-8") as f:
        f.write("\n".join(phone_numbers) + "\n")

# üìå ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ã‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡πà‡∏≠
def extract_angpao_codes(text):
    decoded_text = urllib.parse.unquote(text)
    pattern = r"https?://(?:[a-zA-Z0-9.-]+/)?gift\\.truemoney\\.com/campaign/\\?v=([a-zA-Z0-9]+)"
    matches = re.findall(pattern, decoded_text.replace(" ", ""))
    return list(set(matches))

# üìå ‡∏≠‡πà‡∏≤‡∏ô QR Code ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á
def extract_qr_code(image_path):
    image = cv2.imread(image_path)
    if image is None:
        return []
    decoded_objects = decode(image)
    return [obj.data.decode("utf-8") for obj in decoded_objects]

# üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°
async def notify_group(angpao_code, results):
    message = f"‡∏û‡∏ö‡∏ã‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πàüí•\n‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏ã‡∏≠‡∏á: https://gift.truemoney.com/campaign/?v={angpao_code}\n\n"
    for phone, status in results:
        message += f"{phone} {'‚úÖ ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if status else '‚ùå ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}\n"
    await client.send_message(notify_group_id, message)

# üìå ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
async def claim_angpao(code, phone):
    url = f"https://store.cyber-safe.pro/api/topup/truemoney/angpaofree/{code}/{phone}"
    headers = {"User-Agent": "Mozilla/5.0"}
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, timeout=0.3) as response:
                return phone, response.status == 200
        except Exception:
            return phone, False

# üìå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ã‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô
async def process_angpao(angpao_code):
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
    priority_numbers = ["0951417365", "0659599070"]
    other_numbers = [p for p in phone_numbers if p not in priority_numbers]
    tasks = [claim_angpao(angpao_code, phone) for phone in priority_numbers if phone in phone_numbers]
    priority_results = await asyncio.gather(*tasks)
    tasks = [claim_angpao(angpao_code, phone) for phone in other_numbers]
    other_results = await asyncio.gather(*tasks)
    results = priority_results + other_results
    await notify_group(angpao_code, results)

# üìå ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏≤
@client.on(events.NewMessage)
async def message_handler(event):
    text = event.raw_text
    angpao_codes = extract_angpao_codes(text)
    if angpao_codes:
        for code in angpao_codes:
            asyncio.create_task(process_angpao(code))

# üìå ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û QR Code
@client.on(events.NewMessage)
async def qr_handler(event):
    if event.photo:
        photo_path = await event.download_media()
        qr_links = extract_qr_code(photo_path)
        angpao_codes = []
        for link in qr_links:
            angpao_codes.extend(extract_angpao_codes(link))
        if angpao_codes:
            for code in angpao_codes:
                asyncio.create_task(process_angpao(code))

# üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö/‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ö‡∏≠‡∏£‡πå
@client.on(events.NewMessage(pattern=r"/(add|remove|list)"))
async def manage_phone(event):
    global phone_numbers
    if event.sender_id != admin_id:
        return await event.reply("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ")
    command, *args = event.text.split()
    if command == "/add" and args:
        new_number = args[0]
        if new_number not in phone_numbers:
            phone_numbers.append(new_number)
            save_phone_numbers(phone_numbers)
            await event.reply(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå {new_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    elif command == "/remove" and args:
        del_number = args[0]
        if del_number in phone_numbers:
            phone_numbers.remove(del_number)
            save_phone_numbers(phone_numbers)
            await event.reply(f"‚úÖ ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå {del_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    elif command == "/list":
        phone_list = "\n".join(phone_numbers) if phone_numbers else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        await event.reply(f"üìú ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà:\n{phone_list}")

# üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
with client:
    client.run_until_disconnected()

