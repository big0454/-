import re
import asyncio
import requests
from telethon import TelegramClient, events

# üîë API ID & HASH
API_ID = 29316101
API_HASH = "81d03af65c3d3a442f38559d3967e28c"

# üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á
PHONE_NUMBERS = ["0951417365", "0959694413", "0829196672", "0659599070"]

# üì¢ ID ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
NOTIFY_GROUP_ID = -1002405260670

# üìå ‡πÄ‡∏Å‡πá‡∏ö‡∏ã‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
used_links = set()

# üì° ‡∏™‡∏£‡πâ‡∏≤‡∏á Telegram Client
client = TelegramClient("truemoney_bot", API_ID, API_HASH)

# üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö)
def extract_angpao_links(text):
    # üîπ ‡∏à‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö: ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡∏£‡∏á, inline link, ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ô HTML ‡∏´‡∏£‡∏∑‡∏≠ Markdown
    link_pattern = r"(https?://gift\.truemoney\.com/campaign/\?v=[\w\d]+)"
    return re.findall(link_pattern, text)

# üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á
def claim_angpao(code, phone):
    url = f"https://store.cyber-safe.pro/api/topup/truemoney/angpaofree/{code}/{phone}"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()

        if data.get("status", {}).get("message", "").lower() == "success":
            tickets = data.get("data", {}).get("tickets", [])
            amount_total = sum(
                float(ticket["amount_baht"])
                for ticket in tickets if ticket["mobile"].replace("-", "") == phone
            )
            return True, amount_total
    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")

    return False, 0.00

# üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
async def notify_success(phone, code, amount):
    message = f"‚úÖ ‡πÄ‡∏ö‡∏≠‡∏£‡πå {phone} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {amount:.2f} ‡∏ö‡∏≤‡∏ó ‡∏à‡∏≤‡∏Å‡∏ã‡∏≠‡∏á {code}!"
    await client.send_message(NOTIFY_GROUP_ID, message)
    print(message)

# üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
async def notify_fail(phone, code):
    message = f"‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå {phone} ‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á {code} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
    await client.send_message(NOTIFY_GROUP_ID, message)
    print(message)

# üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
@client.on(events.NewMessage)
async def handler(event):
    message = event.message.message or ""
    print(f"üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {message}")  # Debug

    # üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ã‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    angpao_links = extract_angpao_links(message)
    if not angpao_links:
        return

    for angpao_link in angpao_links:
        angpao_code = angpao_link.split("v=")[-1]

        # üö´ ‡∏Ç‡πâ‡∏≤‡∏°‡∏ã‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
        if angpao_code in used_links:
            print(f"üö´ ‡∏ã‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß: {angpao_code}")
            continue

        used_links.add(angpao_code)
        print(f"üéÅ ‡∏û‡∏ö‡∏ã‡∏≠‡∏á: {angpao_code}")

        # üì≤ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ã‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
        for phone in PHONE_NUMBERS:
            success, amount = claim_angpao(angpao_code, phone)
            if success:
                await notify_success(phone, angpao_code, amount)
            else:
                await notify_fail(phone, angpao_code)

# üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó
async def main():
    print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
    await client.start()
    print("‚úÖ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    await client.run_until_disconnected()

asyncio.run(main())
